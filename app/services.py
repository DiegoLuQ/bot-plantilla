import httpx
import json
from config import settings as sett
from whatsapp_messaging import *
from asyncio import sleep


async def guardar_datos_db(data):
    try:
        # print(data)
        headers = {'Content-Type': 'application/json'}

        async with httpx.AsyncClient() as client:
            response = await client.post("http://127.0.0.1:8001/v1/user_wsp/register_user", headers=headers, data=data)

        if response.status_code == 200:
            return 'mensaje guardado', 200
        else:
            print('error al guardar mensaje', response.status_code)
    except Exception as e:
        return str(e), 403


async def enviar_Mensaje_whatsapp(data):
    try:
        # print(data)
        whatsapp_token = sett.wsp_token
        whatsapp_url = sett.wsp_url
        headers = {'Content-Type': 'application/json',
                   'Authorization': 'Bearer ' + whatsapp_token}

        async with httpx.AsyncClient() as client:
            response = await client.post(whatsapp_url, headers=headers, data=data)
        print(response.status_code)
        if response.status_code == 200:
            print('mensaje guardado', 200)
            return 'mensaje guardado', 200
        else:
            print("mensaje no enviado", response)
            return 'error al enviar mensaje', response.status_code
    except Exception as e:
        return str(e), 403


async def obtener_Mensaje_whatsapp(message):
    if 'type' not in message:
        text = 'Mensaje no reconocido'
        return text

    typeMessage = message['type']

    if typeMessage == 'text':
        text = message['text']['body']
    elif typeMessage == 'button':
        text = message['button']['text']
    elif typeMessage == 'interactive' and message['interactive']['type'] == 'list_reply':
        text = message['interactive']['list_reply']['title']
    elif typeMessage == 'interactive' and message['interactive']['type'] == 'button_reply':
        text = message['interactive']['button_reply']['title']
    elif typeMessage == 'order':
        # Llama a una funci√≥n que procesa y resume la orden, esta funci√≥n se debe definir
        text = message['order']
        print(text)
    elif typeMessage == 'location':
        text = "Ubicaci√≥n"
    elif typeMessage == 'image':
        text = message['image']
    else:
        text = 'mensaje no reconocido'

    return text


async def bloquear_usuario(text, number, messageId, name, timestamp):
    list_for = []

    async def Enviar_Saludo_Bloqueo():
        body = "Disculpaüôè, parece que estoy un poco abrumado ü•± por la cantidad de mensajes. Perm√≠teme tomar un breve descanso de 30 segundos ‚è≥ para reorganizarme y estar√© de vuelta contigo enseguidaüèÉüí®. ¬°Gracias por tu paciencia! üòä"
        data = await Enviar_MensajeIndividual_Message(number=number, messageId=messageId, text=body)
        return data
    if text:
        list_for.append(Enviar_Saludo_Bloqueo())

    return await enviar_mensaje_usuario(list_for)


async def enviar_mensaje_usuario(list_for):
    for item in list_for:
        await enviar_Mensaje_whatsapp(item)
        await sleep(1)


# Nuevo Forma
async def ObtenerTotalDeOrden_msg(number, data_orden, messageId):
    data = await Enviar_MensajeIndividual_Message(number, data_orden, messageId)
    return data


async def EnviarMetodosDePagos_img_options(number):
    body = "Aqui te envio los datos de transferencia"
    footer = "SF | Gracias por preferirnos ‚ô•"
    options = ["Transferencia", "Pago en Efectivo", "3er Opcion"]
    # aca deberia consultar en la db, en la tabla proceso de pagos, columna imagen y hacer la consulta con la id o numero
    url_img = "https://i.postimg.cc/PJPRZJBh/e35f9d3b-f59b-44ed-91e2-e6742799baad.png"
    data = await ButtonImagenOpciones_Message(number, body=body, footer=footer, options=options, url_img=url_img)
    return data


async def Datos_para_descargarImagen(number, imagen_id, messageId):
    img_url = await ObtenerIdImagen(imagen_id)
    await descargar_imagen(img_url, number)
    data = await Enviar_MensajeIndividual_Message(number, "Gracias por el screeshot", messageId)
    return data


async def Descagar_pdf(number):
    try:
        link = str(sett.doc_pdf)
        caption = "PDF de nuestros filtros"
        filename = "Filtros - SF"

        data = await Enviar_Document_Message(number, link, caption, filename)
        return data
    except Exception as e:
        print(e)


async def Send_Catalogo_wsp(number):
    try:
        body = "Te presento nuestro catalogo"
        footer = "SF | santiagofiltros.cl"
        data = await Enviar_CatalgoSimpleWSP_Message(number, body, footer)
        return data
    except Exception as e:
        print(e)


async def RecibirUbicacion_Cliente(number):
    try:
        body = "Envianos tu direcci√≥n para ir a dejar tu pedido \n üëá"
        data = await Recibir_UbicacionCliente_Message(number, body)
        return data
    except Exception as e:
        print(e)


async def Enviar_Lista_Productos(number):
    try:
        lista_opciones = [
            {
                "title": "Filtro de aire üçÉ",
                "rows": [
                    {
                        "id": "aire-identifier1",
                        "title": "F. Aire PDF",
                        # "description": "row-description-content"
                    },
                    {
                        "id": "aire-identifier2",
                        "title": "F. Aire WEb",
                        # "description": "row-description-content"
                    }
                ]
            },
            {
                "title": "Filtro de Combustible ‚õΩ",
                "rows": [
                    {
                        "id": "combustible-identifier1",
                        "title": "F. Combustible PDF ",
                        # "description": "row-description-content"
                    },
                    {
                        "id": "combustible-identifier2",
                        "title": "F. Combustible WEb",
                        # "description": "row-description-content"
                    }
                ]
            },
            {
                "title": "Filtro de aceite üèÅ",
                "rows": [
                    {
                        "id": "aceite-identifier1",
                        "title": "F. Aceite PDF",
                        # "description": "row-description-content"
                    },
                    {
                        "id": "aceite-identifier2",
                        "title": "F. Aceite Web",
                        # "description": "row-description-content"
                    }
                ]
            },

        ]
        body_text = "Productos de calidad, dale a tus cliente lo mejor"
        header_text = "Listado de Filtros"
        footer_text = "SF | Calidad y Confianza"
        button_text = "Ver ‚òëÔ∏è"
        opciones = lista_opciones

        data = await Enviar_Lista_Opciones_Message(number, body_text, header_text, footer_text, button_text, opciones)
        return data
    except Exception as e:
        print(e)


async def Enviar_Menu_Saludo(number, messageId):
    body = "Hola, ¬°bienvenido a SF! ‚ù§Ô∏è Soy tu asistente virtual Jack 24/7. Navega por nuestro men√∫, conoce m√°s sobre SF üòé y descubre c√≥mo iniciar tu negocio con nosotros üöÄ."
    footer = "Equipo SF"
    options = ["Catalogo", "Informaci√≥n", "Ventas"]
    return await Enviar_Menu_Message(number, messageId, body, footer, options, sed="1")


async def Enviar_Menu_Catalogo(number, messageId):
    body = "Buena elecci√≥n para revisar nuestros productos, te dejo aqu√≠ unas opciones"
    footer = "Productos SF"
    options = ["üóíÔ∏è Descargar PDF", "ü§ü Lista de Productos", "üòé Catalogo WSP"]
    return await Enviar_Menu_Message(number, messageId, body, footer, options, sed="2")


async def Enviar_Menu_Informacion(number, messageId):
    body = "Quieres saber m√°s de nosotros?, te dejo aqu√≠ unas opciones"
    footer = "Informaci√≥n SF"
    options = ["Ubicaci√≥n?", "Redes Sociales", "Tienen pagina web?"]
    return await Enviar_Menu_Message(number, messageId, body, footer, options, sed="3")


async def Enviar_Menu_Ventas(number, messageId):
    body = "Emprende junto a nostros! ü§ü, te dejo aqu√≠ unas opciones"
    footer = "Emprendiendo con SF"
    options = ["Contactar vendedor",
               "Tu primer negocio",
               "Consejos Utiles"]
    data = await Enviar_Menu_Message(number, messageId, body, footer, options, sed="3")
    return data


async def Enviar_Mensaje_ButtonImagen(number):
    body = "Te presento nuestras redes sociales, no olvides seguirnos para enterarte de ofertas y promociones del d√≠a"
    footer = "SF | Redes Sociales - FIX"
    options = ["Instagram", "Facebook", "TikTok"]
    url_img = "https://dinahosting.com/blog/upload/2022/07/tamanos-imagenes-redes-sociales-2024_dinahosting.png"
    data = await ButtonImagenOpciones_Message(number, body, footer, options, url_img)
    return data
        
async def Enviar_Menu_PrimerNegocio(number):
    body = "Tu primer negocio junto a SF | Confianza y Calidad"
    footer = "SF | Gracias por preferirnos ‚ô•"
    options = ["Soy Cliente", "Primera Compra", "Ayuda PDF"]
    url_img = "https://i.postimg.cc/PJPRZJBh/e35f9d3b-f59b-44ed-91e2-e6742799baad.png"
    data = await ButtonImagenOpciones_Message(number, body, footer, options, url_img)
    return data

async def Enviar_MiUbicacion(number, messageId):
    try:
        data = await Ubicacion_Empresa_Message(number, messageId)
        return data
    except Exception as e:
        print(e)


async def Mensaje_Contactar_Vendedor(number):
    data = await ButtonContact_Message(number)
    return data


async def Enviar_TienenPaginaWeb(number):
    try:
        data = await Enviar_URLTexto_Message(number)
        return data
    except Exception as e:
        print(e)

async def Mensaje_Primera_Compra(number):

    lista_opciones = [
        {
            "title": "¬øCu√°l es tu presupuesto?",
            "rows": [
                {
                    "id": "presupuesto1",
                    "title": "CLP 100.000 - 300.000",
                    # "description": "row-description-content"
                },
                {
                    "id": "presupuesto2",
                    "title": "CLP 300.001 - 500.000",
                    # "description": "row-description-content"
                },
                {
                    "id": "presupuesto3",
                    "title": "CLP 500.001 - 700.000",
                    # "description": "row-description-content"
                },
                {
                    "id": "presupuesto4",
                    "title": "CLP 700.001 - XXX.XXX",
                    # "description": "row-description-content"
                }
            ]
        }
    ]
    header_text = "Presupuestos PREDETERMINADOS ü§ü"
    body_text = "Selecciona el rango de compra üõí que mejor se ajusta a tus necesidades y te facilitaremos un PDF üìÑ detallado para tu consulta. Este documento est√° dise√±ado con filtros espec√≠ficos üîç para adaptarse a las particularidades de tu negocio üè≠, asegurando que encuentres exactamente lo que buscas de manera eficiente üíº."
    footer_text = "SF | Calidad y Confianza"
    button_text = "Ver Presupuestos üòé"
    opciones = lista_opciones
    data = await Enviar_Lista_Opciones_Message(number, body_text=body_text, header_text=header_text, footer_text=footer_text, button_text=button_text,opciones=opciones)
    return data

async def SinContext(number, messageId):     
    body = "No tengo ese comando en mi sistema, dime como puedo ayudarte?"
    footer = "Equipo SF | santiagofiltros.cl"
    options = ["Catalogo", "Informaci√≥n", "Tu Negocio"]
    data = await ButtonOpciones_Responder_msg(number, options, body, footer, "sed7", messageId)
    return data

async def Enviar_Imagenes(number):
    link = "https://i.postimg.cc/4xzJdjY2/Personal-Portafolio.jpg"
    caption = "Enviamos esta imagen para su conocimiento"
    data = await Enviar_Imagen_MSG(number, link, caption)
    return data

async def Mensaje_Rapido(number, messageId, mensaje=None):
    return await Enviar_MensajeIndividual_Message(number, mensaje, messageId)

async def administrar_chatbot(text, number, messageId, name, timestamp):
    # print(type(text))
    list_for = []
    lista_privada = ["hola", "admin"]

    if 'product_items' in text:
        data_orden = await procesar_orden(text)
        list_for.append(await EnviarMetodosDePagos_img_options(number))
        list_for.append(await ObtenerTotalDeOrden_msg(number, data_orden, messageId))

    elif 'mime_type' in text:
        imagen_id = text['id']
        # enviamos la id obtenenida del json
        list_for.append(await Datos_para_descargarImagen(imagen_id, number, messageId))

    else:
        text = text.lower()
        payload = json.dumps({
            "wsp_name": name,
            "wsp_number": number,
            "wsp_timestamp": timestamp,
            "wsp_text": text,
            "wsp_messageid": messageId
        })
        print(f"Mensaje del usuario {name}:", text)
        if text in "hola":

            # await guardar_datos_db(payload)
            list_for.append(await Enviar_Menu_Saludo(number, messageId))
        elif "img_send" in text: #enviamos una imagen
            list_for.append(await Enviar_Imagenes(number))

        # CATALOGO
        elif "catalogo" in text:
            list_for.append(await Enviar_Menu_Catalogo(number, messageId))
        elif "descargar pdf" in text:
            list_for.append(await Descagar_pdf(number))
        elif "catalogo wsp" in text:
            list_for.append(await Send_Catalogo_wsp(number))
        elif "enviar ubicaci√≥n" in text:
            list_for.append(await RecibirUbicacion_Cliente(number))
        elif "lista de productos" in text:
            list_for.append(await Enviar_Lista_Productos(number))
        # CREAR LOS ENLACES QUE LLEVEN AL USUARIO A BUSCAR LOS FILTROS www.santiagofitlros.cl/filtros/filtros-de-aire
        # Informaci√≥n
        elif text in "informaci√≥n":
            list_for.append(await Enviar_Menu_Informacion(number, messageId))
        elif text in "redes sociales":
            list_for.append(await Enviar_Mensaje_ButtonImagen(number))
        elif text in "ubicaci√≥n?":
            list_for.append(await Enviar_MiUbicacion(number, messageId))
        elif text in "tienen pagina web?":
            list_for.append(await Enviar_TienenPaginaWeb(number))
        # TU NEGOCIO
        elif text in "ventas":
            list_for.append(await Enviar_Menu_Ventas(number, messageId))
        elif text in "contactar vendedor":
            list_for.append(await Mensaje_Contactar_Vendedor(number))

        # TU PRIMER NEGOCIO
        elif text in "tu primer negocio":
            list_for.append(await Enviar_Menu_PrimerNegocio(number))

        elif text in "soy cliente":
            pass

        elif text in "primera compra":
            tasks = await Enviar_VariosMensajes_Message(number, messageId)
            data = await Mensaje_Primera_Compra(number)
            
            for task in tasks:
                list_for.append(task)
            list_for.append(data)

        elif text in "CLP 100.000 - 300.000":
            
            list_for.append(await Mensaje_Rapido(number, messageId, "Descubre c√≥mo tu negocio puede beneficiarse de nuestra selecci√≥n de filtros con precios especiales al por mayor, ideales para peque√±as empresas o talleres que est√°n comenzando. Al elegir esta opci√≥n, recibir√°s un PDF detallado con una propuesta de precios dise√±ada para optimizar tu inversi√≥n inicial."))

        elif text in "CLP 300.001 - 500.000":
            list_for.append(await Mensaje_Rapido(number,messageId, "Para empresas en crecimiento, ofrecemos un rango de precios competitivos que se ajusta a tus necesidades de expansi√≥n. Seleccionando este nivel, te enviaremos un PDF con una estructura de precios al por mayor que te permitir√° escalar tu negocio manteniendo un equilibrio entre calidad y coste."))

        elif text in "CLP 500.001 - 700.000":
            list_for.append(await Mensaje_Rapido(number,messageId, "Empresas establecidas encontrar√°n en este rango una oportunidad para fortalecer su cadena de suministro con nuestros filtros de alto rendimiento a precios preferenciales. El PDF que recibir√°s como parte de esta opci√≥n refleja una estrategia de precios pensada para socios comprometidos con la calidad y la eficiencia."))

        elif text in "CLP 700.001 - XXX.XXX":
            list_for.append(await Mensaje_Rapido(number, messageId, "Dirigido a l√≠deres de la industria y grandes flotas, este rango ofrece el mejor valor con precios exclusivos al por mayor para pedidos de gran volumen. Al optar por esta categor√≠a, el PDF proporcionado incluir√° una oferta personalizada que reconoce y recompensa tu inversi√≥n y fidelidad a largo plazo con SF."))

        # OTROS MENSAJES
        elif text in "gracias":
            list_for.append(await Mensaje_Rapido(number, messageId, "Estamos para ayudarte ü§ì", ))

        elif text in ["chao", "hasta luego"]:
            list_for.append(await Mensaje_Rapido(number, messageId, "Estamos para ayudarte ü§ì", ))

        elif text in "ok":
            list_for.append(await Mensaje_Rapido(number, messageId, "üòé"))

        elif text in "como es el local?":
            
            list_for.append(await Enviar_Imagenes)

        else:                
            list_for.append(await SinContext(number, messageId))

    return await enviar_mensaje_usuario(list_for)
